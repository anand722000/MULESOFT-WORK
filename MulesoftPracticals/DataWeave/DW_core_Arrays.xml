<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="DW_core_ArraysFlow" doc:id="f98df4f3-c728-45e1-9344-22e4436289de" >
		<ee:transform doc:name="dw::core::Arrays" doc:id="2551bdc0-d6b7-41c4-ab6c-b9c090d44d96" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw
import * from dw::core::Arrays
var users = ["Mariano", "Leandro", "Julian"]
var arr = [0,1,3,2,1]
var arr0 = [] as Array<Number>
var users1 = [{name: "Mariano", lastName: "Achaval"}, {name: "Ana", lastName: "Felisatti"}, {name: "Mariano", lastName: "de Sousa"}]



/*
This module contains helper functions for working with arrays.
To use this module, you must import it to your DataWeave code, 
for example, by adding the line import * from dw::core::Arrays 
to the header of your DataWeave script.
 */


---
{  //Counts the elements in an array that return true when the matching
   // function is applied to the value of each element.
	"countBy" : [1, 2, 3, 4] countBy (($ mod 2) == 0) ,
	
	//Breaks up an array into sub-arrays that contain the specified number of elements.
	 "divideBy" : [
      { "divideBy2" : [1, 2, 3, 4, 5] divideBy 2 },
      { "divideBy2" : [1, 2, 3, 4, 5, 6] divideBy 2 },
      { "divideBy3" : [1, 2, 3, 4, 5] divideBy 3 } ]  ,
     
     //Drops the first n elements. It returns the original array when n <= 0 and an
     //empty array when n > sizeOf(array). 
     "drop" : drop(users, 2) ,
     
     //Drops elements from the array while the condition is met but stops the selection 
     //process when it reaches an element that fails to satisfy the condition.
	  "dropwhile" : arr dropWhile $ < 3 ,
	  
	  //Returns true if every element in the array matches the condition.
	"results" : [
     "ok" : [
        [1,1,1] every ($ == 1),
        [1] every ($ == 1)
     ],
     "err" : [
        [1,2,3] every ((log('should stop at 2 ==', $) mod 2) == 1),
        [1,1,0] every ($ == 1),
        [0,1,1,0] every (log('should stop at 0 ==', $) == 1),
        [1,2,3] every ($ == 1),
        arr0 every true,
     ]
   ] ,
	
	//Returns the first element that satisfies the condition, or returns null 
	//if no element meets the condition.
	"user1" : {"a": users1 firstWith ((user, index) -> user.name == "Mariano"),
    "b": users1 firstWith ((user, index) -> user.name == "Peter") } ,
    
    //Returns the index of the first occurrence of an element within the array. 
    //If the value is not found, the function returns -1.
    "indexof" : indexOf(users, "Julian") ,
    
    //Returns the index of the first occurrence of an element that matches a 
    //condition within the array. If no element matches the condition, the function returns -1.
    "user" : users indexWhere (item) -> item startsWith "Jul" ,
    
    //JOIN 
    
    //Left Join 
    
    //Outter Join
    
    //Separates the array into the elements that satisfy the condition from those that do not.
	"partition" : arr partition (item) -> isEven(item) ,
	
	//Selects the interval of elements that satisfy the condition: from <= indexOf(array) < until
	"Slice" : slice(arr, 1, 4) ,
	
	//Returns true if at least one element in the array matches the specified condition. 
	//The function stops iterating after the first element that matches the condition is found 
	 "results" : [
    "ok" : [
      [1,2,3] some (($ mod 2) == 0),
      [1,2,3] some ((nextNum) -> (nextNum mod 2) == 0),
      [1,2,3] some (($ mod 2) == 1),
      [1,2,3,4,5,6,7,8] some (log('should stop at 2 ==', $) == 2),
      [1,2,3] some ($ == 1),
      [1,1,1] some ($ == 1),
      [1] some ($ == 1)
    ],
    "err" : [
      [1,2,3] some ($ == 100),
      [1] some ($ == 2)
    ]  ]  ,
    
    //Splits an array into two at a given position.
    "Split" : users splitAt 1 ,
    
    //Returns the sum of the values of the elements in an array.
     "sumBy" : [
    [ { a: 1 }, { a: 2 }, { a: 3 } ] sumBy $.a,
    sumBy([ { a: 1 }, { a: 2 }, { a: 3 } ], (item) -> item.a) ] ,
  
	//Selects the first n elements. It returns an empty array when n <= 0 and the 
	//original array when n > sizeOf(array).
	"take" : take(users, 2) ,
	
	
	
	
	
	
	
	
	
	
	
	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
